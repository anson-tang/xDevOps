<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (C) 2005 - 2014  Eric Van Dewoestine

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<!--
  - Installer build file that is executed upon installation.
  -->
<project name="eclim_installer" default="installer" basedir="."
    xmlns:formic="antlib:org.formic.ant"
    xmlns:eclim="antlib:org.eclim.installer.ant">

  <formic:property resource="/build.properties"/>

  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
  <taskdef classname="net.sf.antcontrib.logic.ForTask" name="for"/>

  <!--
    - Standard target to install the app.
    - Note: Must be named "installer".
    -->
  <target name="installer" depends="validate-not-root">
    <formic:installer property="install.complete"
        resources="resources.install" steps="resources.steps">
      <formic:path name="main">
        <formic:step name="welcome"/>
        <formic:step name="license"/>
        <formic:step name="vim"/>
        <formic:step name="eclipse"/>
        <formic:step name="requirements">
          <property name="provider"
              value="org.eclim.installer.step.RequirementProvider"/>
        </formic:step>
        <formic:step name="eclipseInfo"/>
        <formic:step name="featureList">
          <property name="provider"
              value="org.eclim.installer.step.FeatureProvider"/>
        </formic:step>
        <formic:step name="summary"/>
        <formic:step name="eclipsePlugins"/>
        <formic:step name="install"/>
        <formic:step name="finished"/>
      </formic:path>
    </formic:installer>
  </target>

  <!--
    - Standard target to uninstall the app.
    - Note: Must be named "uninstaller".
    -->
  <target name="uninstaller">
    <formic:installer property="uninstall.complete"
        resources="resources.uninstall" steps="resources.steps">
      <formic:path name="main">
        <formic:step name="welcome"/>
        <formic:step name="vim"/>
        <formic:step name="eclipse"/>
        <formic:step name="eclipseInfo"/>
        <formic:step name="summary"/>
        <formic:step name="uninstall"/>
        <formic:step name="finished"/>
      </formic:path>
    </formic:installer>
  </target>

  <!--
    - Initialize properties from the wizard / command line.
    -->
  <target name="init">
    <!-- default value of eclipse.local to that of eclipse.home -->
    <property name="eclipse.local" value="${eclipse.home}"/>
    <property name="eclim.features" value="${eclipse.local}/features"/>
    <property name="eclim.plugins" value="${eclipse.local}/plugins"/>
    <property name="eclim.home"
        value="${eclim.plugins}/org.eclim_${eclim.version}"/>
  </target>

  <target name="validate-not-root">
    <if>
      <equals arg1="${user.name}" arg2="root"/>
      <then>
        <fail>
Abort:

####
Running the eclim installer as root is highly discouraged.
####
        </fail>
      </then>
    </if>
  </target>

  <!--
    - Simple validation mostly intended as a sanity check for unattended
    - installs.
    -->
  <target name="validate" depends="validate-not-root">
    <if>
      <not>
        <and>
          <isset property="eclipse.home"/>
          <or>
            <isset property="vim.files"/>
            <istrue value="${vim.skip}"/>
          </or>
        </and>
      </not>
      <then>
        <fail>
One or more required properties have not been set:

eclipse.home:  ${eclipse.home}
vim.files:     ${vim.files}

You may omit vim.files if you set vim.skip=true, resulting in the
vim files being excluded from the install.
        </fail>
      </then>
    </if>

    <eclim:unattended/>
  </target>

  <!--
    - Task that will run at the end of the wizard process to perform user
    - defined task after gathering info from the user via the wizard.
    - Note: Must be named "install".
    -->
  <target name="install" depends="init,validate">
    <formic:tempdir property="temp"/>
    <eclim:shutdown/>
    <antcall target="clean"/>
    <antcall target="install.eclipse"/>
    <antcall target="install.vim"/>
    <antcall target="cleanup"/>
    <property name="eclim.cleanup.finished" value="true"/>
  </target>

  <!--
    - Task that will run at the end of the uninstaller wizard process.
    - Note: Must be named "uninstall".
    -->
  <target name="uninstall" depends="init,validate">
    <eclim:shutdown/>
    <antcall target="clean"/>
    <delete dir="${vim.files}/eclim" failonerror="false"/>
    <antcall target="cleanup"/>
    <property name="eclim.cleanup.finished" value="true"/>
  </target>

  <!--
    - Prepares the dynamic eclim update-site.
    -->
  <target name="update-site">
    <mkdir dir="${temp}/update-site/plugins"/>
    <mkdir dir="${temp}/update-site/features"/>
    <eclim:unzip resource="/files/eclim-update-site.zip" dest="${temp}/update-site">
      <eclim:featureset/>
      <patternset includes="*.xml"/>
    </eclim:unzip>

    <formic:template
        template="${temp}/update-site/artifacts.xml"
        out="${temp}/update-site/artifacts.xml"/>
    <formic:template
        template="${temp}/update-site/content.xml"
        out="${temp}/update-site/content.xml"/>
    <formic:template
        template="${temp}/update-site/features/org.eclim_${eclim.version}/feature.xml"
        out="${temp}/update-site/features/org.eclim_${eclim.version}/feature.xml"/>
    <path id="artifacts">
      <fileset dir="${temp}/update-site" includes="artifacts.xml,content.xml"/>
      <dirset dir="${temp}/update-site" includes="features/*,plugins/*"/>
    </path>
    <property name="artifacts" refid="artifacts"/>
    <for param="artifact" list="${artifacts}" delimiter="${path.separator}">
      <sequential>
        <propertyregex
            property="artifact" override="true" input="@{artifact}"
            regexp="\\" replace="/" defaultValue="@{artifact}"/>
        <propertyregex
            property="artifact" override="true" input="${artifact}"
            regexp=".*/update-site/" replace=""/>
        <propertyregex
            property="artifact.name" override="true" input="${artifact}"
            regexp="\.xml" replace="" defaultValue="${artifact}"/>
        <jar destfile="${temp}/update-site/${artifact.name}.jar" filesonly="true"
            filesetmanifest="merge">
          <fileset dir="${temp}/update-site" includes="${artifact}"/>
          <fileset dir="${temp}/update-site/${artifact.name}" includes="**/*"
            erroronmissingdir="false"/>
        </jar>
        <delete file="@{artifact}" quiet="true"/>
        <delete dir="@{artifact}" quiet="true"/>
      </sequential>
    </for>
  </target>

  <!--
    - Installs the eclipse plugins
    -->
  <target name="install.eclipse">
    <antcall target="update-site"/>

    <eclim:installiu repository="file://${temp}/update-site" iu="org.eclim"/>

    <if>
      <os family="windows"/>
      <then>
        <copy todir="${eclipse.home}">
          <fileset dir="${eclim.home}/bin"
              includes="eclim.bat,eclim.cmd,eclimd.bat,eclimd.cmd,ng.exe"/>
        </copy>
      </then>
      <else>
        <replace file="${eclim.home}/bin/eclimd"
            token="#$${eclipse.home}"
            value="ECLIM_ECLIPSE_HOME=&quot;${eclipse.home}&quot;"/>
        <replace
            file="${eclim.home}/bin/native/linux/eclimd.desktop"
            token="$${eclipse.home}" value="${eclipse.local}"/>
        <replace
            file="${eclim.home}/bin/native/linux/eclimd"
            token="$${eclipse.home}" value="${eclipse.local}"/>

        <chmod perm="755">
          <fileset dir="${eclim.home}/bin">
            <include name="eclim"/>
            <include name="eclimd"/>
            <include name="native/**/*"/>
          </fileset>
          <fileset dir="${eclim.home}/nailgun">
            <include name="configure"/>
          </fileset>
        </chmod>

        <!-- formic doesn't include optional ant tasks (symlink in this case) -->
        <exec executable="ln" dir="${eclipse.local}">
          <arg line="-s plugins/org.eclim_${eclim.version}/bin/eclim ."/>
        </exec>
        <exec executable="ln" dir="${eclipse.local}">
          <arg line="-s plugins/org.eclim_${eclim.version}/bin/eclimd ."/>
        </exec>

        <exec executable="${eclim.home}/nailgun/configure" failonerror="true"
            dir="${eclim.home}/nailgun"
            resolveexecutable="true"/>
        <exec executable="make" failonerror="true"
            dir="${eclim.home}/nailgun"/>
        <move file="${eclim.home}/nailgun/ng" todir="${eclim.home}/bin"/>
      </else>
    </if>

    <replace
        file="${eclim.home}/plugin.properties"
        token="$${vim.files}" value="${vim.files}"/>

    <!-- determine if current os supports emebedding gvim. -->
    <if>
      <os family="mac"/>
      <then> <property name="eclim.gvim.embed" value="false"/> </then>
      <else> <property name="eclim.gvim.embed" value="true"/> </else>
    </if>

    <!-- default gvim location to the empty value -->
    <property name="eclim.gvim" value=""/>

    <replace dir="${eclim.plugins}/org.eclim.vimplugin_${eclim.version}"
        includes="plugin.properties">
      <replacefilter token="$${eclim.gvim}" value="${eclim.gvim}"/>
      <replacefilter token="$${eclim.gvim.embed}" value="${eclim.gvim.embed}"/>
    </replace>
  </target>

  <!--
    - Installs the vim plugins
    -->
  <target name="install.vim">
    <if>
      <not> <istrue value="${vim.skip}"/> </not>
      <then>
        <eclim:unzip resource="/files/vim-plugins.zip" dest="${vim.files}">
          <eclim:featureset/>
          <cutdirsmapper dirs="1"/>
        </eclim:unzip>

        <replace file="${vim.files}/eclim/plugin/eclim.vim">
          <replacefilter token="&quot;$${vim.eclim.home}&quot;"
              value="let g:EclimHome = '${eclim.home}'"/>
          <replacefilter token="&quot;$${vim.eclipse.home}&quot;"
              value="let g:EclimEclipseHome = '${eclipse.local}'"/>
        </replace>

        <!-- migrate resources from old ${vim.files}/eclim/resources location
             to the new location at ~/.eclim/resources -->
        <move todir="${user.home}/.eclim/resources" overwrite="false" failonerror="false">
          <fileset dir="${vim.files}/eclim/resources" includes="**/*"/>
        </move>
        <delete dir="${vim.files}/eclim/resources" failonerror="false"/>
      </then>
      <else><echo message="Skipping install of vimfiles"/></else>
    </if>
  </target>

  <!--
    - Task to remove old eclim files.
    -->
  <target name="clean">
    <!-- if the eclim feature exists, uninstall using p2 -->
    <if>
      <eclim:isinstalled feature="org.eclim"/>
      <then>
        <eclim:uninstalliu iu="org.eclim"/>
      </then>
    </if>

    <!-- remove eclipse plugins -->
    <if>
      <os family="windows"/>
      <then>
        <delete> <fileset dir="${eclipse.home}" includes="eclim*,ng.exe"/> </delete>
      </then>
      <else>
        <!-- java symlink support sucks, especially if the link is broken -->
        <exec executable="rm"> <arg line="'${eclipse.local}/eclim'"/> </exec>
        <exec executable="rm"> <arg line="'${eclipse.local}/eclimd'"/> </exec>
      </else>
    </if>
    <delete includeemptydirs="true">
      <fileset dir="${eclim.features}"
          includes="org.eclim*.jar" excludes="org.eclim.installer*.jar"/>
      <fileset dir="${eclim.plugins}"
          includes="org.eclim*.jar" excludes="org.eclim.installer*.jar"/>
      <fileset dir="${eclim.features}" includes="org.eclim*/**/*"/>
      <fileset dir="${eclim.plugins}" includes="org.eclim*/**/*"/>
      <dirset dir="${eclim.features}" includes="org.eclim*"/>
      <dirset dir="${eclim.plugins}" includes="org.eclim*"/>
    </delete>
    <!-- remove from old user local location -->
    <if>
      <not> <os family="windows"/> </not>
      <then>
        <property name="eclim.plugins.old"
            value="${eclipse.local}/configuration/eclipse/plugins"/>
        <delete includeemptydirs="true" failonerror="false">
          <fileset dir="${eclim.plugins.old}" includes="org.eclim*/**/*"/>
          <dirset dir="${eclim.plugins.old}" includes="org.eclim*"/>
        </delete>
        <delete failonerror="false" file="${eclipse.local}/configuration/eclipse/eclim"/>
        <delete failonerror="false" file="${eclipse.local}/configuration/eclipse/eclimd"/>
      </then>
    </if>

    <!-- remove old vim files
         (when altering includes/excludes, update VimStep.proceed) -->
    <if>
      <not> <istrue value="${vim.skip}"/> </not>
      <then>
        <delete failonerror="false" includeemptydirs="true">
          <fileset dir="${vim.files}/plugin" includes="eclim.vim"/>
          <fileset dir="${vim.files}/eclim">
            <include name="**/*"/>
            <exclude name="after/**/*"/>
            <exclude name="resources/**/*"/>
          </fileset>
        </delete>
      </then>
    </if>
  </target>

  <!--
    - Task that will run if the wizard was canceled, where any necessary
    - cleanup can occur.
    - Note: Must be named "canceled".
    -->
  <target name="canceled">
    <echo>Installation canceled.</echo>
    <antcall target="cleanup"/>
  </target>

  <!--
    - Cleanup any installer files when installer has completed or has been canceled.
    -->
  <target name="cleanup">
    <if>
      <and>
        <isset property="eclim.installer.feature.installed"/>
        <not> <isset property="eclim.cleanup.finished"/> </not>
      </and>
      <then>
        <echo>
##
# Please wait while the eclim installer feature is removed from eclipse...
##
        </echo>
        <eclim:uninstalliu
            repository="${eclim.installer.feature.location}"
            iu="org.eclim.installer"
            failonerror="false"/>
      </then>
    </if>
  </target>

</project>
